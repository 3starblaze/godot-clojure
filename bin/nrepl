#!/usr/bin/env bb

(require '[babashka.process :refer [process]])
(require '[bb-utils :as u])

(let [dir (u/get-project-root!)
      env (u/get-env! "godot-clojure.dev.nrepl" "entry-fn")
      my-sh (fn [& args]
              (let [result (apply shell/sh (concat args [:dir dir :env env]))]
                (println result)
                (when (not= (:exit result) 0)
                  (binding [*out* *err*]
                    (println "Non-zero exit code found, halting...")
                    (System/exit 1)))))]
  ;; "make" and "mv" don't really need env data but it's easier to use the same function for all
  ;; shell calls.
  (my-sh "make")
  (my-sh "mv" "entry.so" "src/dummy_godot_project")
  (my-sh "godot"
         "--export-debug" "Linux/X11"
         "--path" "src/dummy_godot_project"
         "--headless")
  (process {:inherit true?
            :dir dir
            :env env}
           "./src/dummy_godot_project/test_project.x86_64")
  ;; Sleep forever. If this is not done then the previous process lives its own life when this
  ;; script is finished and I want to force it to be foreground.
  (while true
    (Thread/sleep (.-MAX_VALUE Long))))
