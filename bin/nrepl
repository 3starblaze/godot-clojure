#!/usr/bin/env bb

(require '[babashka.process :refer [process]])

;; We assume this file is in "<repo>/bin" folder and we can find the repo by getting the parent
;; directory.
(let [project-root-path (-> *file* clojure.java.io/as-file .getParentFile .getParent)
      original-classpath (:out (shell/sh "clojure" "-Spath" "-A:dev" :dir project-root-path))
      ;; Classpath can include relative paths which need to be absolute because the godot project
      ;; is in another place and that probably breaks the classpaths. Making paths absolute does
      ;; the trick, so that's what we do.
      augmented-classpath (->> (str/split original-classpath #":")
                               (map #(if (str/starts-with? % "/") % (str project-root-path "/" %)))
                               (str/join ":"))
      boilerplate-env (merge
                       ;; `System/getenv` doesn't return a real map and we can't merge the result
                       ;; so we use `into` to force it to be a map.
                       (into {} (System/getenv))
                       {"GODOT_CLOJURE_CLASSPATH" augmented-classpath
                        "GODOT_CLOJURE_ENTRY_NS" "godot-clojure.nrepl"
                        "GODOT_CLOJURE_ENTRY_FN" "entry-fn"
                        "LD_LIBRARY_PATH" "/usr/lib/jvm/java-1.11.0-openjdk-amd64/lib/server"})
      my-sh (fn [& args]
              (let [result (apply shell/sh (concat args [:dir project-root-path
                                                         :env boilerplate-env]))]
                (println result)
                (when (not= (:exit result) 0)
                  (binding [*out* *err*]
                    (println "Non-zero exit code found, halting...")
                    (System/exit 1)))))]
  ;; "make" and "mv" don't really need env data but it's easier to use the same function for all
  ;; shell calls.
  (my-sh "make")
  (my-sh "mv" "entry.so" "src/dummy_godot_project")
  (my-sh "godot"
         "--export-debug" "Linux/X11"
         "--path" "src/dummy_godot_project"
         "--headless")
  (process {:inherit true?
            :dir project-root-path
            :env boilerplate-env}
           "./src/dummy_godot_project/test_project.x86_64")
  ;; Sleep forever. If this is not done then the previous process lives its own life when this
  ;; script is finished and I want to force it to be foreground.
  (while true
    (Thread/sleep (.-MAX_VALUE Long))))
